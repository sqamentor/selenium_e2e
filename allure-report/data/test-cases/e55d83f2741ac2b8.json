{"uid":"e55d83f2741ac2b8","name":"Full End-to-End Booking Flow","fullName":"tests.ui.test_run_full#test_run_full","historyId":"12c417b5a7a6bf8402323a2990001b5f","time":{"start":1745325674136,"stop":1745325743854,"duration":69718},"status":"broken","statusMessage":"KeyError: 'label_type'","statusTrace":"self = <allure_pytest.listener.AllureListener object at 0x0000018BFE3CB8C0>, item = <Function test_run_full>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        yield\n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        test_result.historyId = get_history_id(\n            test_result.fullName,\n            test_result.parameters,\n            original_values=self.__get_pytest_params(item)\n        )\n>       test_result.labels.extend([Label(name=name, value=value) for name, value in allure_labels(item)])\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\listener.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_run_full>\n\n    def allure_labels(item):\n        unique_labels = dict()\n        labels = set()\n        for mark in item.iter_markers(name=ALLURE_LABEL_MARK):\n>           label_type = mark.kwargs[\"label_type\"]\nE           KeyError: 'label_type'\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\utils.py:61: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"KeyError: 'label_type'","statusTrace":"self = <allure_pytest.listener.AllureListener object at 0x0000018BFE3CB8C0>, item = <Function test_run_full>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        yield\n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        test_result.historyId = get_history_id(\n            test_result.fullName,\n            test_result.parameters,\n            original_values=self.__get_pytest_params(item)\n        )\n>       test_result.labels.extend([Label(name=name, value=value) for name, value in allure_labels(item)])\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\listener.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_run_full>\n\n    def allure_labels(item):\n        unique_labels = dict()\n        labels = set()\n        for mark in item.iter_markers(name=ALLURE_LABEL_MARK):\n>           label_type = mark.kwargs[\"label_type\"]\nE           KeyError: 'label_type'\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\utils.py:61: KeyError","steps":[],"attachments":[{"uid":"84293366b782b9f5","name":"log","source":"84293366b782b9f5.txt","type":"text/plain","size":2846}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a28310b639e99190","status":"broken","statusDetails":"KeyError: 'label_type'","time":{"start":1745325399307,"stop":1745325473166,"duration":73859}},{"uid":"9e0ef5ad16fb1bfb","status":"broken","statusDetails":"KeyError: 'label_type'","time":{"start":1745324635826,"stop":1745324715059,"duration":79233}},{"uid":"abca816161b52aa1","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00FC80E3+60707]\n\tGetHandleVerifier [0x00FC8124+60772]\n\t(No symbol) [0x00DF04FE]\n\t(No symbol) [0x00E2B898]\n\t(No symbol) [0x00E5CF06]\n\t(No symbol) [0x00E589D5]\n\t(No symbol) [0x00E57F66]\n\t(No symbol) [0x00DC36E5]\n\t(No symbol) [0x00DC3C3E]\n\t(No symbol) [0x00DC40CD]\n\tGetHandleVerifier [0x0120BBC3+2435075]\n\tGetHandleVerifier [0x01207163+2416035]\n\tGetHandleVerifier [0x0122350C+2531660]\n\tGetHandleVerifier [0x00FDF1B5+155125]\n\tGetHandleVerifier [0x00FE5B5D+182173]\n\t(No symbol) [0x00DC33B0]\n\t(No symbol) [0x00DC2BC3]\n\tGetHandleVerifier [0x0132D2AC+3620588]\n\tBaseThreadInitThunk [0x75EA5D49+25]\n\tRtlInitializeExceptionChain [0x76FACFFB+107]\n\tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]","time":{"start":1745324522368,"stop":1745324587588,"duration":65220}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"e55d83f2741ac2b8.json","parameterValues":[]}