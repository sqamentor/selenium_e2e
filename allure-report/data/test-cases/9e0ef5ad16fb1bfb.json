{"uid":"9e0ef5ad16fb1bfb","name":"Full End-to-End Booking Flow","fullName":"tests.ui.test_run_full#test_run_full","historyId":"12c417b5a7a6bf8402323a2990001b5f","time":{"start":1745324635826,"stop":1745324715059,"duration":79233},"status":"broken","statusMessage":"KeyError: 'label_type'","statusTrace":"self = <allure_pytest.listener.AllureListener object at 0x0000011940FEB8C0>, item = <Function test_run_full>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        yield\n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        test_result.historyId = get_history_id(\n            test_result.fullName,\n            test_result.parameters,\n            original_values=self.__get_pytest_params(item)\n        )\n>       test_result.labels.extend([Label(name=name, value=value) for name, value in allure_labels(item)])\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\listener.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_run_full>\n\n    def allure_labels(item):\n        unique_labels = dict()\n        labels = set()\n        for mark in item.iter_markers(name=ALLURE_LABEL_MARK):\n>           label_type = mark.kwargs[\"label_type\"]\nE           KeyError: 'label_type'\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\utils.py:61: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"KeyError: 'label_type'","statusTrace":"self = <allure_pytest.listener.AllureListener object at 0x0000011940FEB8C0>, item = <Function test_run_full>\n\n    @pytest.hookimpl(hookwrapper=True)\n    def pytest_runtest_teardown(self, item):\n        yield\n        uuid = self._cache.get(item.nodeid)\n        test_result = self.allure_logger.get_test(uuid)\n        test_result.historyId = get_history_id(\n            test_result.fullName,\n            test_result.parameters,\n            original_values=self.__get_pytest_params(item)\n        )\n>       test_result.labels.extend([Label(name=name, value=value) for name, value in allure_labels(item)])\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\listener.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_run_full>\n\n    def allure_labels(item):\n        unique_labels = dict()\n        labels = set()\n        for mark in item.iter_markers(name=ALLURE_LABEL_MARK):\n>           label_type = mark.kwargs[\"label_type\"]\nE           KeyError: 'label_type'\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_pytest\\utils.py:61: KeyError","steps":[],"attachments":[{"uid":"2de3a23170f6b090","name":"log","source":"2de3a23170f6b090.txt","type":"text/plain","size":1524}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"attachmentStep":false,"hasContent":true},"afterStages":[],"labels":[{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9e0ef5ad16fb1bfb.json","parameterValues":[]}