{"name": "Full End-to-End Booking Flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x00FC80E3+60707]\n\tGetHandleVerifier [0x00FC8124+60772]\n\t(No symbol) [0x00DF04FE]\n\t(No symbol) [0x00E2B898]\n\t(No symbol) [0x00E5CF06]\n\t(No symbol) [0x00E589D5]\n\t(No symbol) [0x00E57F66]\n\t(No symbol) [0x00DC36E5]\n\t(No symbol) [0x00DC3C3E]\n\t(No symbol) [0x00DC40CD]\n\tGetHandleVerifier [0x0120BBC3+2435075]\n\tGetHandleVerifier [0x01207163+2416035]\n\tGetHandleVerifier [0x0122350C+2531660]\n\tGetHandleVerifier [0x00FDF1B5+155125]\n\tGetHandleVerifier [0x00FE5B5D+182173]\n\t(No symbol) [0x00DC33B0]\n\t(No symbol) [0x00DC2BC3]\n\tGetHandleVerifier [0x0132D2AC+3620588]\n\tBaseThreadInitThunk [0x75EA5D49+25]\n\tRtlInitializeExceptionChain [0x76FACFFB+107]\n\tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]", "trace": "self = <pages.PatientReferral.PatientReferral object at 0x000001DDB7878830>\n\n    def wait_for_referral_page(self):\n        try:\n>           self.wait.until(EC.invisibility_of_element_located((By.ID, \"preloader\")))\n\npages\\PatientReferral.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:565: in _predicate\n    target = driver.find_element(*target)\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DDB779F380>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76FACFFB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FC80E3+60707]\nE       \tGetHandleVerifier [0x00FC8124+60772]\nE       \t(No symbol) [0x00DF04FE]\nE       \t(No symbol) [0x00E2B898]\nE       \t(No symbol) [0x00E5CF06]\nE       \t(No symbol) [0x00E589D5]\nE       \t(No symbol) [0x00E57F66]\nE       \t(No symbol) [0x00DC36E5]\nE       \t(No symbol) [0x00DC3C3E]\nE       \t(No symbol) [0x00DC40CD]\nE       \tGetHandleVerifier [0x0120BBC3+2435075]\nE       \tGetHandleVerifier [0x01207163+2416035]\nE       \tGetHandleVerifier [0x0122350C+2531660]\nE       \tGetHandleVerifier [0x00FDF1B5+155125]\nE       \tGetHandleVerifier [0x00FE5B5D+182173]\nE       \t(No symbol) [0x00DC33B0]\nE       \t(No symbol) [0x00DC2BC3]\nE       \tGetHandleVerifier [0x0132D2AC+3620588]\nE       \tBaseThreadInitThunk [0x75EA5D49+25]\nE       \tRtlInitializeExceptionChain [0x76FACFFB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pages.PatientReferral.PatientReferral object at 0x000001DDB7878830>, option_text = 'Internet search'\n\n    def select_referral_option(self, option_text=\"Internet search\"):\n        try:\n>           self.wait_for_referral_page()\n\npages\\PatientReferral.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\PatientReferral.py:22: in wait_for_referral_page\n    self.driver.save_screenshot(\"screenshots/error_wait_referral_page.png\")\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DDB779F380>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76FACFFB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FC80E3+60707]\nE       \tGetHandleVerifier [0x00FC8124+60772]\nE       \t(No symbol) [0x00DF04FE]\nE       \t(No symbol) [0x00E2B898]\nE       \t(No symbol) [0x00E5CF06]\nE       \t(No symbol) [0x00E589D5]\nE       \t(No symbol) [0x00E57F66]\nE       \t(No symbol) [0x00DC36E5]\nE       \t(No symbol) [0x00DC3C3E]\nE       \t(No symbol) [0x00DC40CD]\nE       \tGetHandleVerifier [0x0120BBC3+2435075]\nE       \tGetHandleVerifier [0x01207163+2416035]\nE       \tGetHandleVerifier [0x0122350C+2531660]\nE       \tGetHandleVerifier [0x00FDF1B5+155125]\nE       \tGetHandleVerifier [0x00FE5B5D+182173]\nE       \t(No symbol) [0x00DC33B0]\nE       \t(No symbol) [0x00DC2BC3]\nE       \tGetHandleVerifier [0x0132D2AC+3620588]\nE       \tBaseThreadInitThunk [0x75EA5D49+25]\nE       \tRtlInitializeExceptionChain [0x76FACFFB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.allure_label(\"Test\")\n    @allure.title(\"Full End-to-End Booking Flow\")\n    def test_run_full():\n        # ------------------------------------------------------------------------------------------------------------\n        # Set up browser once\n        target = \"https://bookslot-staging.centerforvein.com/?istestrecord=1\"\n        driver = run_chrome_automation(target_url=target)\n        #driver = run_edge_automation(target_url=target)\n        finder = ElementFinder(driver)\n        try:\n            # Step 1: Book Slot Page\n            form = BookslotInfoOtpPage(driver)\n            form.enter_first_name(\"CVRTester\")\n            form.enter_last_name(\"Test\")\n            form.enter_email(\"CVRTest12345@mailinator.com\")\n            form.enter_phone_number(\"1234567890\")\n            form.enter_zip(\"20678\")\n            form.select_contact_method(\"Text\")\n            form.click_send_code()\n            form.enter_code(\"123456\")\n            form.verify_code()\n            logging.info(\"✅ Step 1: Book Slot completed.\")\n    \n            # Step 2: Event Selection Page\n            event = EventSelectionPage(driver)\n            event.wait_for_loader()\n            #event.click_request_call_back()\n            event.click_new_patient_appointment()\n            #event.click_complimentary_consultation()\n            logging.info(\"✅ Step 2: Event selection completed.\")\n    \n            scheduler = WebSchedulerPage(driver)\n            scheduler.wait_for_scheduler_heading()\n            scheduler.click_request_call_back()\n            scheduler.validate_no_past_dates_clickable()\n            scheduler.enter_date_range(2, 90)  # Selects today+3 to today+30\n            scheduler.enter_zip_distance(\"20678\", \"50\")\n            #scheduler.select_last_date()\n            time.sleep(6)\n            scheduler.click_first_available_slot()\n            logging.info(\"✅ Step 3: Scheduler slot selection done.\")\n    \n            # Step 3: Request Appointment Page\n            scheduler = RequestAppointmentPage(driver, finder)\n            #scheduler.click_request_call_back()\n            scheduler.wait_for_page_to_load()\n            scheduler.wait_for_session_timer()\n            scheduler.validate_appointment_summary()\n            scheduler.click_next_button()\n            logging.info(\"✅ Step 4: Request Appointment validated and submitted.\")\n    \n            # Step 4: Patient Info\n            patient_info_page = PatientInformationPage(driver, finder)\n            patient_info_page.wait_for_patient_info_form()\n            patient_info_page.fill_mandatory_fields(\"03/15/1991\")\n            patient_info_page.click_next_button()\n            try:\n                result_url = patient_info_page.submit_and_verify_next_step()\n    \n                # Conditional navigation handling\n                if \"patient-existant\" in result_url or \"Go to Home\" in result_url:\n                    logging.info(\"🛑 Existing patient detected. Ending flow.\")\n                    print(f\"➡️ Redirected to: {result_url}\")\n                    driver.save_screenshot(\"screenshots/existing_patient_detected.png\")\n                    exit(0)\n    \n            except Exception as e:\n                logging.error(\"🚫 Stopping execution due to Patient Info failure.\")\n                #exit(1)\n    \n            # Step 5: Existing Patient Check\n            patient_exist_page = PatientExistantPage(driver)\n            if patient_exist_page.is_displayed():\n                patient_exist_page.handle_existing_patient_page()\n                logging.warning(\"🛑 Existing patient detected. Booking flow stopped.\")\n                print(f\"➡️ Redirected to: {driver.current_url}\")\n                exit(1)\n    \n            # Step 6: Referral Page\n            referral_page = PatientReferral(driver, finder)\n>           referral_page.select_referral_option(\"Internet search\")  # or random\n\ntests\\ui\\test_run_full.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\PatientReferral.py:39: in select_referral_option\n    self.driver.save_screenshot(\"screenshots/error_select_referral_option.png\")\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DDB779F380>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76FACFFB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FC80E3+60707]\nE       \tGetHandleVerifier [0x00FC8124+60772]\nE       \t(No symbol) [0x00DF04FE]\nE       \t(No symbol) [0x00E2B898]\nE       \t(No symbol) [0x00E5CF06]\nE       \t(No symbol) [0x00E589D5]\nE       \t(No symbol) [0x00E57F66]\nE       \t(No symbol) [0x00DC36E5]\nE       \t(No symbol) [0x00DC3C3E]\nE       \t(No symbol) [0x00DC40CD]\nE       \tGetHandleVerifier [0x0120BBC3+2435075]\nE       \tGetHandleVerifier [0x01207163+2416035]\nE       \tGetHandleVerifier [0x0122350C+2531660]\nE       \tGetHandleVerifier [0x00FDF1B5+155125]\nE       \tGetHandleVerifier [0x00FE5B5D+182173]\nE       \t(No symbol) [0x00DC33B0]\nE       \t(No symbol) [0x00DC2BC3]\nE       \tGetHandleVerifier [0x0132D2AC+3620588]\nE       \tBaseThreadInitThunk [0x75EA5D49+25]\nE       \tRtlInitializeExceptionChain [0x76FACFFB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.allure_label(\"Test\")\n    @allure.title(\"Full End-to-End Booking Flow\")\n    def test_run_full():\n        # ------------------------------------------------------------------------------------------------------------\n        # Set up browser once\n        target = \"https://bookslot-staging.centerforvein.com/?istestrecord=1\"\n        driver = run_chrome_automation(target_url=target)\n        #driver = run_edge_automation(target_url=target)\n        finder = ElementFinder(driver)\n        try:\n            # Step 1: Book Slot Page\n            form = BookslotInfoOtpPage(driver)\n            form.enter_first_name(\"CVRTester\")\n            form.enter_last_name(\"Test\")\n            form.enter_email(\"CVRTest12345@mailinator.com\")\n            form.enter_phone_number(\"1234567890\")\n            form.enter_zip(\"20678\")\n            form.select_contact_method(\"Text\")\n            form.click_send_code()\n            form.enter_code(\"123456\")\n            form.verify_code()\n            logging.info(\"✅ Step 1: Book Slot completed.\")\n    \n            # Step 2: Event Selection Page\n            event = EventSelectionPage(driver)\n            event.wait_for_loader()\n            #event.click_request_call_back()\n            event.click_new_patient_appointment()\n            #event.click_complimentary_consultation()\n            logging.info(\"✅ Step 2: Event selection completed.\")\n    \n            scheduler = WebSchedulerPage(driver)\n            scheduler.wait_for_scheduler_heading()\n            scheduler.click_request_call_back()\n            scheduler.validate_no_past_dates_clickable()\n            scheduler.enter_date_range(2, 90)  # Selects today+3 to today+30\n            scheduler.enter_zip_distance(\"20678\", \"50\")\n            #scheduler.select_last_date()\n            time.sleep(6)\n            scheduler.click_first_available_slot()\n            logging.info(\"✅ Step 3: Scheduler slot selection done.\")\n    \n            # Step 3: Request Appointment Page\n            scheduler = RequestAppointmentPage(driver, finder)\n            #scheduler.click_request_call_back()\n            scheduler.wait_for_page_to_load()\n            scheduler.wait_for_session_timer()\n            scheduler.validate_appointment_summary()\n            scheduler.click_next_button()\n            logging.info(\"✅ Step 4: Request Appointment validated and submitted.\")\n    \n            # Step 4: Patient Info\n            patient_info_page = PatientInformationPage(driver, finder)\n            patient_info_page.wait_for_patient_info_form()\n            patient_info_page.fill_mandatory_fields(\"03/15/1991\")\n            patient_info_page.click_next_button()\n            try:\n                result_url = patient_info_page.submit_and_verify_next_step()\n    \n                # Conditional navigation handling\n                if \"patient-existant\" in result_url or \"Go to Home\" in result_url:\n                    logging.info(\"🛑 Existing patient detected. Ending flow.\")\n                    print(f\"➡️ Redirected to: {result_url}\")\n                    driver.save_screenshot(\"screenshots/existing_patient_detected.png\")\n                    exit(0)\n    \n            except Exception as e:\n                logging.error(\"🚫 Stopping execution due to Patient Info failure.\")\n                #exit(1)\n    \n            # Step 5: Existing Patient Check\n            patient_exist_page = PatientExistantPage(driver)\n            if patient_exist_page.is_displayed():\n                patient_exist_page.handle_existing_patient_page()\n                logging.warning(\"🛑 Existing patient detected. Booking flow stopped.\")\n                print(f\"➡️ Redirected to: {driver.current_url}\")\n                exit(1)\n    \n            # Step 6: Referral Page\n            referral_page = PatientReferral(driver, finder)\n            referral_page.select_referral_option(\"Internet search\")  # or random\n            referral_page.click_next_button()\n            logging.info(\"✅ Step 6: Referral page submitted.\")\n    \n            # Step 7: Insurance Page\n            insurance_page = InsurancePage(driver, finder)\n            try:\n                insurance_page.fill_insurance_form()\n                insurance_page.click_send_to_clinic()\n                logging.info(\"✅ Step 6: Insurance form submitted.\")\n            except Exception as e:\n                logging.error(\"💥 Unexpected error during Insurance submission step.\")\n                raise\n    \n        except TimeoutException as te:\n            logging.error(f\"⏱️ Timeout while waiting for an element: {te}\")\n            driver.save_screenshot(\"screenshots/timeout_error.png\")\n        except Exception as e:\n            logging.exception(f\"💥 Unexpected error during test run: {e}\")\n>           driver.save_screenshot(\"screenshots/unexpected_error.png\")\n\ntests\\ui\\test_run_full.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DDB779F380>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76FACFFB+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00FC80E3+60707]\nE       \tGetHandleVerifier [0x00FC8124+60772]\nE       \t(No symbol) [0x00DF04FE]\nE       \t(No symbol) [0x00E2B898]\nE       \t(No symbol) [0x00E5CF06]\nE       \t(No symbol) [0x00E589D5]\nE       \t(No symbol) [0x00E57F66]\nE       \t(No symbol) [0x00DC36E5]\nE       \t(No symbol) [0x00DC3C3E]\nE       \t(No symbol) [0x00DC40CD]\nE       \tGetHandleVerifier [0x0120BBC3+2435075]\nE       \tGetHandleVerifier [0x01207163+2416035]\nE       \tGetHandleVerifier [0x0122350C+2531660]\nE       \tGetHandleVerifier [0x00FDF1B5+155125]\nE       \tGetHandleVerifier [0x00FE5B5D+182173]\nE       \t(No symbol) [0x00DC33B0]\nE       \t(No symbol) [0x00DC2BC3]\nE       \tGetHandleVerifier [0x0132D2AC+3620588]\nE       \tBaseThreadInitThunk [0x75EA5D49+25]\nE       \tRtlInitializeExceptionChain [0x76FACFFB+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FACF81+561]\n\n..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "cb4da537-d226-4497-937e-9c561729b5cf-attachment.txt", "type": "text/plain"}], "start": 1745324522368, "stop": 1745324587588, "uuid": "e2d8f04a-a524-493d-88c9-f03aa5a7a36d", "historyId": "12c417b5a7a6bf8402323a2990001b5f", "testCaseId": "12c417b5a7a6bf8402323a2990001b5f", "fullName": "tests.ui.test_run_full#test_run_full"}